require('dotenv').config();

const express = require('express');
const app = express();
app.get('/', (req, res) => res.send('‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç'));
app.listen(3000, () => console.log('üåê Express —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 3000'));

const {
  Client,
  GatewayIntentBits,
  Partials,
  EmbedBuilder,
  ModalBuilder,
  TextInputBuilder,
  TextInputStyle,
  ActionRowBuilder,
  ButtonBuilder,
  ButtonStyle,
  ChannelType,
  PermissionsBitField,
  InteractionType,
} = require('discord.js');

const dayjs = require('dayjs');
const relativeTime = require('dayjs/plugin/relativeTime');
dayjs.extend(relativeTime);

const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent,
    GatewayIntentBits.GuildVoiceStates,
  ],
  partials: [Partials.Channel],
});

const CATEGORY_ID = '1200037290538451095';
const ROLES_ACCESS_IDS = [
  '1203016198850355231', // —Ä–æ–ª—å –¥–ª—è High PR
  '1203021666800902184',  // —Ä–æ–ª—å –¥–ª—è PR
];
const CHANNEL_ACCEPT_ID = '1386830144789942272'; // –ö–∞–Ω–∞–ª –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞—è–≤–æ–∫
const CHANNEL_DECLINE_ID = '1386830559136714825'; // –ö–∞–Ω–∞–ª –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–æ–∫
const CHANNEL_LOG_ID = '1304923881294925876'; // –ö–∞–Ω–∞–ª –ª–æ–≥–æ–≤
const INVITE_CHANNEL_ID = '1387148896320487564'; // –ö–∞–Ω–∞–ª –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –∑–∞—è–≤–∫–∏
function createStatusNotificationEmbed(status, applicationName, channelName = '', guildId, applicationLink = '') {
  let color;
  let title = '';
  let description = '';
  
  const timeAgo = dayjs().fromNow();

  switch (status.toLowerCase()) {
    case '—Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ':
      color = 0xf1c40f; // –∂—ë–ª—Ç—ã–π
      title = '–†–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏';
      description = `–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –≤ **${applicationName}** –≤–∑—è—Ç–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ!`;
      break;
    case '–æ–±–∑–≤–æ–Ω':
      color = 0x3498db; // —Å–∏–Ω–∏–π
      title = '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ –æ–±–∑–≤–æ–Ω';
      description = `–í—ã –±—ã–ª–∏ –≤—ã–∑–≤–∞–Ω—ã –Ω–∞ –æ–±–∑–≤–æ–Ω!`;
      break;
    case '–ø—Ä–∏–Ω—è—Ç–æ':
      color = 0x2ecc71; // –∑–µ–ª—ë–Ω—ã–π
      title = '–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞';
      description = `–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –≤ **${applicationName}** —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç–∞!`;
      break;
    case '–æ—Ç–∫–ª–æ–Ω–µ–Ω–æ':
      color = 0xe74c3c; // –∫—Ä–∞—Å–Ω—ã–π
      title = '–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞';
      description = `–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –≤ **${applicationName}** –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.`;
      break;
    default:
      color = 0x2f3136; // —Å–µ—Ä—ã–π
      title = '–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –æ–±–Ω–æ–≤–ª—ë–Ω';
      description = `–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ **${applicationName}** –∏–∑–º–µ–Ω—ë–Ω.`;
  }

  return new EmbedBuilder()
    .setColor(color)
    .setTitle(title)
    .setDescription(description)
    .setTimestamp();
}

// –≠—Ç–æ—Ç –±–ª–æ–∫ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –±–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ
client.once('ready', async () => {
  console.log(`‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ ${client.user.tag}`);

  const inviteChannel = await client.channels.fetch(INVITE_CHANNEL_ID);
  if (!inviteChannel || !inviteChannel.isTextBased()) return;

  const messages = await inviteChannel.messages.fetch({ limit: 10 });
  const botMessage = messages.find((m) => m.author.id === client.user.id);
  if (botMessage) await botMessage.delete().catch(() => {});

  const embed = new EmbedBuilder()
    .setTitle('üìã –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É')
    .setDescription(
      '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É.\n\n' +
      '**–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?**\n' +
      '1. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É **–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É**.\n' +
      '2. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è —Ñ–æ—Ä–º—ã.\n' +
      '3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ä–º—É, –∏ –º—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –≤–∞—à—É –∑–∞—è–≤–∫—É –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.'
    )
    .setImage('https://media.discordapp.net/attachments/1300952767078203493/1388174214187581582/ezgif-61741d6e62f365.gif')
    .setColor(0x2f3136);

  const button = new ButtonBuilder()
    .setCustomId('open_modal')
    .setLabel('–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É')
    .setStyle(ButtonStyle.Primary);

  const row = new ActionRowBuilder().addComponents(button);
  await inviteChannel.send({ embeds: [embed], components: [row] });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π —Å –∫–Ω–æ–ø–∫–∞–º–∏
client.on('interactionCreate', async (interaction) => {
  if (interaction.isButton() && interaction.customId === 'open_modal') {
    const modal = new ModalBuilder().setCustomId('application_modal').setTitle('üìù –ó–∞—è–≤–∫–∞ –≤ —Å–µ–º—å—é');
    const fields = [
      { id: 'nickname_stat', label: '–ù–∏–∫–Ω–µ–π–º | —Å—Ç–∞—Ç–∏–∫', style: TextInputStyle.Short, placeholder: 'Sky Garcia | 100000' },
      { id: 'irl_name_age', label: 'IRL –ò–º—è | –≤–æ–∑—Ä–∞—Å—Ç', style: TextInputStyle.Short, placeholder: '–¢–∏–º–∞ | 20' },
      { id: 'family_history', label: '–í –∫–∞–∫–∏—Ö —Å–µ–º—å—è—Ö —Å–æ—Å—Ç–æ—è–ª–∏ —Ä–∞–Ω–µ–µ?', style: TextInputStyle.Paragraph, placeholder: '–£–∫–∞–∂–∏—Ç–µ, –µ—Å–ª–∏ –±—ã–ª–∏ –≤ –¥—Ä—É–≥–∏—Ö —Å–µ–º—å—è—Ö' },
      { id: 'servers', label: '–ù–∞ –∫–∞–∫–∏—Ö —Å–µ—Ä–≤–µ—Ä–∞—Ö –≤–∫–∞—á–∞–Ω—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∏?', style: TextInputStyle.Short, placeholder: '06, 11, 15' },
      { id: 'recoil_links', label: '–û—Ç–∫–∞—Ç—ã —Å—Ç—Ä–µ–ª—å–±—ã (YouTube / Rutube)', style: TextInputStyle.Paragraph, placeholder: 'https://youtube.com/...' }
    ];
    modal.addComponents(
      ...fields.map(f =>
        new ActionRowBuilder().addComponents(
          new TextInputBuilder()
            .setCustomId(f.id)
            .setLabel(f.label)
            .setStyle(f.style)
            .setPlaceholder(f.placeholder)
            .setRequired(true)
        )
      )
    );
    return interaction.showModal(modal);
  }

  if (interaction.type === InteractionType.ModalSubmit && interaction.customId === 'application_modal') {
    try {
      await interaction.deferReply({ ephemeral: true });

      const user = interaction.user;
      const guild = interaction.guild;
      const nicknameStat = interaction.fields.getTextInputValue('nickname_stat');
      const irl = interaction.fields.getTextInputValue('irl_name_age');
      const history = interaction.fields.getTextInputValue('family_history');
      const servers = interaction.fields.getTextInputValue('servers');
      const recoil = interaction.fields.getTextInputValue('recoil_links');

      const channelName = `–∑–∞—è–≤–∫–∞-${user.username}`.toLowerCase().replace(/[^a-z0-9\-–∞-—è]/gi, '-');
      const overwrites = [
        { id: guild.roles.everyone, deny: [PermissionsBitField.Flags.ViewChannel] },
        { id: user.id, allow: [PermissionsBitField.Flags.ViewChannel] },
        ...ROLES_ACCESS_IDS.map(roleId => ({ id: roleId, allow: [PermissionsBitField.Flags.ViewChannel] }))
      ];

      const channel = await guild.channels.create({
        name: channelName,
        type: ChannelType.GuildText,
        parent: CATEGORY_ID,
        permissionOverwrites: overwrites
      });

      const embed = new EmbedBuilder()
        .setTitle('üì® –ó–∞—è–≤–∫–∞')
        .addFields(
          { name: '–ù–∏–∫–Ω–µ–π–º –∏ —Å—Ç–∞—Ç–∏–∫', value: nicknameStat },
          { name: 'IRL –∏–º—è –∏ –≤–æ–∑—Ä–∞—Å—Ç', value: irl },
          { name: '–°–µ–º—å–∏ —Ä–∞–Ω–µ–µ', value: history },
          { name: '–°–µ—Ä–≤–µ—Ä–∞', value: servers },
          { name: '–û—Ç–∫–∞—Ç—ã —Å—Ç—Ä–µ–ª—å–±—ã', value: recoil },
          { name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', value: `<@${user.id}>` }
        )
        .setFooter({ text: `ID: ${user.id}` })
        .setColor(0xf1c40f)
        .setTimestamp();

      const buttons = new ActionRowBuilder().addComponents(
        new ButtonBuilder().setCustomId(`accept_app:${user.id}`).setLabel('–ü—Ä–∏–Ω—è—Ç—å').setStyle(ButtonStyle.Success),
        new ButtonBuilder().setCustomId(`review_app:${user.id}`).setLabel('–†–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ').setStyle(ButtonStyle.Secondary),
        new ButtonBuilder().setCustomId(`call_app:${user.id}`).setLabel('–û–±–∑–≤–æ–Ω').setStyle(ButtonStyle.Primary),
        new ButtonBuilder().setCustomId(`decline_app:${user.id}`).setLabel('–û—Ç–∫–ª–æ–Ω–∏—Ç—å').setStyle(ButtonStyle.Danger)
      );

      await channel.send({
        content: ROLES_ACCESS_IDS.map(id => `<@&${id}>`).join(' '),
        embeds: [embed],
        components: [buttons]
      });

      await interaction.editReply({ content: `‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: ${channel}` });
    } catch (err) {
      console.error('Modal error:', err);
      if (!interaction.deferred && !interaction.replied) {
        await interaction.reply({ content: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ.', flags: 64 }).catch(() => {});
      } else {
        await interaction.editReply({ content: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ.' }).catch(() => {});
      }
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–†–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ"
  if (interaction.isButton() && interaction.customId.startsWith('review_app:')) {
    const targetUserId = interaction.customId.split(':')[1];
    const guild = interaction.guild;
    const member = await guild.members.fetch(targetUserId).catch(() => null);
    if (!member) return interaction.reply({ content: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω', ephemeral: true });

    const moderator = interaction.user;

    const logChannel = await client.channels.fetch(CHANNEL_LOG_ID);
    await logChannel.send(`${moderator} –≤–∑—è–ª –∑–∞—è–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <@${targetUserId}> –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ.`);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
    await interaction.reply({
      content: `–ó–∞—è–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <@${targetUserId}> –≤–∑—è—Ç–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º ${moderator}`,
      ephemeral: true,
    });
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û–±–∑–≤–æ–Ω"
  if (interaction.isButton() && interaction.customId.startsWith('call_app:')) {
    const targetUserId = interaction.customId.split(':')[1];
    const guild = interaction.guild;
    const member = await guild.members.fetch(targetUserId).catch(() => null);
    if (!member) return interaction.reply({ content: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω', ephemeral: true });

    const moderator = interaction.user;
    const voiceChannels = guild.channels.cache.filter(ch => ch.type === 'GUILD_VOICE');
    
    const voiceChannel = await interaction.channel.send({
      content: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª –¥–ª—è –æ–±–∑–≤–æ–Ω–∞.',
      components: [
        new ActionRowBuilder().addComponents(
          new ButtonBuilder().setCustomId('select_channel').setLabel('–í—ã–±—Ä–∞—Ç—å –∫–∞–Ω–∞–ª').setStyle(ButtonStyle.Primary)
        ),
      ],
    });

    // –ü—Ä–∏–º–µ—Ä–Ω–æ —Ç–∞–∫: 
    // –ü–∏—à–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –≤—ã–∑–≤–∞–Ω –Ω–∞ –æ–±–∑–≤–æ–Ω –∏ —É–ø–æ–º–∏–Ω–∞–µ–º –∫–∞–Ω–∞–ª
    await interaction.reply({
      content: `${member} –±—ã–ª –≤—ã–∑–≤–∞–Ω –Ω–∞ –æ–±–∑–≤–æ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º ${moderator} –≤ –∫–∞–Ω–∞–ª ${voiceChannel}`,
      ephemeral: true,
    });
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–∏–Ω—è—Ç—å"
  if (interaction.isButton() && interaction.customId.startsWith('accept_app:')) {
    const targetUserId = interaction.customId.split(':')[1];
    const guild = interaction.guild;
    const member = await guild.members.fetch(targetUserId).catch(() => null);
    if (!member) return interaction.reply({ content: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω', ephemeral: true });

    const applicationName = 'G A R C I A';
    const guildId = guild.id;

    const embed = createStatusNotificationEmbed('–ø—Ä–∏–Ω—è—Ç–æ', applicationName, '', guildId);

    await member.send({ embeds: [embed] }).catch(() => {});

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ invite-logs
    const logChannel = await client.channels.fetch(CHANNEL_LOG_ID);
    await logChannel.send(`${interaction.user} –ø—Ä–∏–Ω—è–ª –∑–∞—è–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <@${targetUserId}>`);

    await interaction.reply({ content: '‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∏–Ω—è—Ç–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.', ephemeral: true });
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û—Ç–∫–ª–æ–Ω–∏—Ç—å"
  if (interaction.isButton() && interaction.customId.startsWith('decline_app:')) {
    const targetUserId = interaction.customId.split(':')[1];
    const guild = interaction.guild;
    const member = await guild.members.fetch(targetUserId).catch(() => null);
    if (!member) return interaction.reply({ content: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω', ephemeral: true });

    const applicationName = 'G A R C I A';
    const guildId = guild.id;

    const embed = createStatusNotificationEmbed('–æ—Ç–∫–ª–æ–Ω–µ–Ω–æ', applicationName, '', guildId);

    await member.send({ embeds: [embed] }).catch(() => {});

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ invite-logs
    const logChannel = await client.channels.fetch(CHANNEL_LOG_ID);
    await logChannel.send(`${interaction.user} –æ—Ç–∫–ª–æ–Ω–∏–ª –∑–∞—è–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <@${targetUserId}>`);

    await interaction.reply({ content: '‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.', ephemeral: true });
  }
});

client.login(process.env.TOKEN);
