require('dotenv').config();
const {
  Client,
  GatewayIntentBits,
  Partials,
  EmbedBuilder,
  ModalBuilder,
  TextInputBuilder,
  TextInputStyle,
  ActionRowBuilder,
  ButtonBuilder,
  ButtonStyle,
  ChannelType,
  PermissionsBitField,
  InteractionType,
  StringSelectMenuBuilder
} = require('discord.js');

const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent
  ],
  partials: [Partials.Channel]
});

const CATEGORY_ID = '1200037290538451095';
const ROLES_ACCESS_IDS = [
  '1200040982746517595',
  '1200045928460058768',
  '1203021666800902184',
  '1203016198850355231'
];
const CHANNEL_ACCEPT_ID = '1386830144789942272';
const CHANNEL_DECLINE_ID = '1386830559136714825';
const CHANNEL_LOG_ID = '1304923881294925876';
const INVITE_CHANNEL_ID = '1387148896320487564';

client.once('ready', async () => {
  console.log(`‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ ${client.user.tag}`);

  const inviteChannel = await client.channels.fetch(INVITE_CHANNEL_ID);
  if (!inviteChannel || !inviteChannel.isTextBased()) return;

  const messages = await inviteChannel.messages.fetch({ limit: 10 });
  const botMessage = messages.find(m => m.author.id === client.user.id);
  if (botMessage) await botMessage.delete().catch(() => {});

  const embed = new EmbedBuilder()
    .setTitle('üìã –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É')
    .setDescription(
      '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É.\n\n' +
      '**–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?**\n' +
      '1. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É **–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É**.\n' +
      '2. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è —Ñ–æ—Ä–º—ã.\n' +
      '3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ä–º—É, –∏ –º—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –≤–∞—à—É –∑–∞—è–≤–∫—É –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.'
    )
    .setImage('https://media.discordapp.net/attachments/1300952214164209746/1387916836452044907/video_3_2_smooth.gif')
    .setColor(0x2f3136);

  const button = new ButtonBuilder()
    .setCustomId('open_modal')
    .setLabel('–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É')
    .setStyle(ButtonStyle.Primary);

  const row = new ActionRowBuilder().addComponents(button);
  await inviteChannel.send({ embeds: [embed], components: [row] });
});

client.on('interactionCreate', async (interaction) => {
  if (interaction.isButton() && interaction.customId === 'open_modal') {
    const modal = new ModalBuilder().setCustomId('application_modal').setTitle('üìù –ó–∞—è–≤–∫–∞ –≤ —Å–µ–º—å—é');
    const fields = [
      { id: 'nickname_stat', label: '–ù–∏–∫–Ω–µ–π–º –∏ —Å—Ç–∞—Ç–∏–∫', style: TextInputStyle.Short, placeholder: 'Murasaki Ice | 56314' },
      { id: 'irl_name_age', label: 'IRL –ò–º—è –∏ –≤–æ–∑—Ä–∞—Å—Ç', style: TextInputStyle.Short, placeholder: '–ö–∏—Ä–∏–ª–ª | 18' },
      { id: 'family_history', label: '–í –∫–∞–∫–∏—Ö —Å–µ–º—å—è—Ö —Å–æ—Å—Ç–æ—è–ª–∏ —Ä–∞–Ω–µ–µ?', style: TextInputStyle.Paragraph, placeholder: '–£–∫–∞–∂–∏—Ç–µ, –µ—Å–ª–∏ –±—ã–ª–∏ –≤ –¥—Ä—É–≥–∏—Ö —Å–µ–º—å—è—Ö' },
      { id: 'servers', label: '–ù–∞ –∫–∞–∫–∏—Ö —Å–µ—Ä–≤–µ—Ä–∞—Ö –∫–∞—á–∞–ª–∏ –ø–µ—Ä—Å–∞?', style: TextInputStyle.Short, placeholder: '11, 15' },
      { id: 'recoil_links', label: '–û—Ç–∫–∞—Ç—ã —Å—Ç—Ä–µ–ª—å–±—ã (YouTube —Å—Å—ã–ª–∫–∏)', style: TextInputStyle.Paragraph, placeholder: 'https://youtube.com/...' }
    ];
    modal.addComponents(
      ...fields.map(f =>
        new ActionRowBuilder().addComponents(
          new TextInputBuilder()
            .setCustomId(f.id)
            .setLabel(f.label)
            .setStyle(f.style)
            .setPlaceholder(f.placeholder)
            .setRequired(true)
        )
      )
    );
    return interaction.showModal(modal);
  }

  if (interaction.type === InteractionType.ModalSubmit && interaction.customId === 'application_modal') {
    try {
      await interaction.deferReply({ ephemeral: true });

      const user = interaction.user;
      const guild = interaction.guild;
      const nicknameStat = interaction.fields.getTextInputValue('nickname_stat');
      const irl = interaction.fields.getTextInputValue('irl_name_age');
      const history = interaction.fields.getTextInputValue('family_history');
      const servers = interaction.fields.getTextInputValue('servers');
      const recoil = interaction.fields.getTextInputValue('recoil_links');

      const channelName = `–∑–∞—è–≤–∫–∞-–≤-—Å–µ–º—å—é-${user.username}`.toLowerCase().replace(/[^a-z0-9\-–∞-—è]/gi, '-');
      const overwrites = [
        { id: guild.roles.everyone, deny: [PermissionsBitField.Flags.ViewChannel] },
        { id: user.id, allow: [PermissionsBitField.Flags.ViewChannel] },
        ...ROLES_ACCESS_IDS.map(roleId => ({ id: roleId, allow: [PermissionsBitField.Flags.ViewChannel] }))
      ];

      const channel = await guild.channels.create({
        name: channelName,
        type: ChannelType.GuildText,
        parent: CATEGORY_ID,
        permissionOverwrites: overwrites
      });

      const embed = new EmbedBuilder()
        .setTitle('üì® –ó–∞—è–≤–∫–∞')
        .addFields(
          { name: '–ù–∏–∫–Ω–µ–π–º –∏ —Å—Ç–∞—Ç–∏–∫', value: nicknameStat },
          { name: 'IRL –∏–º—è –∏ –≤–æ–∑—Ä–∞—Å—Ç', value: irl },
          { name: '–°–µ–º—å–∏ —Ä–∞–Ω–µ–µ', value: history },
          { name: '–°–µ—Ä–≤–µ—Ä–∞', value: servers },
          { name: '–û—Ç–∫–∞—Ç—ã —Å—Ç—Ä–µ–ª—å–±—ã', value: recoil },
          { name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', value: `<@${user.id}>` }
        )
        .setFooter({ text: `ID: ${user.id}` })
        .setColor(0x2f3136)
        .setTimestamp();

      const buttons = new ActionRowBuilder().addComponents(
        new ButtonBuilder().setCustomId(`accept_app:${user.id}`).setLabel('–ü—Ä–∏–Ω—è—Ç—å').setStyle(ButtonStyle.Success),
        new ButtonBuilder().setCustomId(`review_app:${user.id}`).setLabel('–†–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ').setStyle(ButtonStyle.Secondary),
        new ButtonBuilder().setCustomId(`call_app:${user.id}`).setLabel('–û–±–∑–≤–æ–Ω').setStyle(ButtonStyle.Primary),
        new ButtonBuilder().setCustomId(`decline_app:${user.id}`).setLabel('–û—Ç–∫–ª–æ–Ω–∏—Ç—å').setStyle(ButtonStyle.Danger)
      );

      await channel.send({
        content: ROLES_ACCESS_IDS.map(id => `<@&${id}>`).join(' '),
        embeds: [embed],
        components: [buttons]
      });

      await interaction.editReply({ content: `‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: ${channel}` });
    } catch (err) {
      console.error('Modal error:', err);
      if (!interaction.deferred && !interaction.replied) {
        await interaction.reply({ content: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ.', flags: 64 }).catch(() => {});
      } else {
        await interaction.editReply({ content: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ.' }).catch(() => {});
      }
    }
  }

  if (interaction.isButton() && interaction.customId.includes('app:')) {
    const [action, targetUserId] = interaction.customId.split(':');
    const guild = interaction.guild;
    const member = await guild.members.fetch(targetUserId).catch(() => null);
    const appChannel = interaction.channel;
    const logChannel = await guild.channels.fetch(CHANNEL_LOG_ID).catch(() => null);
    if (!member) return;

    const embedToSend = interaction.message.embeds?.[0];

    if (action === 'accept_app') {
      const targetChannel = await guild.channels.fetch(CHANNEL_ACCEPT_ID).catch(() => null);
      if (targetChannel?.isTextBased() && embedToSend) {
        await targetChannel.send({
          content: `‚úÖ –ü—Ä–∏–Ω—è—Ç–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç <@${targetUserId}>`,
          embeds: [embedToSend]
        });
      }

      await logChannel?.send({
        embeds: [new EmbedBuilder()
          .setTitle('‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞')
          .setDescription(`–ó–∞—è–≤–∫–∞ –æ—Ç <@${targetUserId}> –±—ã–ª–∞ **–ø—Ä–∏–Ω—è—Ç–∞** –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º <@${interaction.user.id}>.`)
          .setColor('Green')
          .setTimestamp()]
      });

      await member.send({
        embeds: [new EmbedBuilder()
          .setTitle('‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞')
          .setDescription(`–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –ø—Ä–∏–Ω—è—Ç–∞. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!`)
          .setColor('Green')]
      }).catch(() => {});

      await interaction.reply({ content: '‚úÖ –ó–∞—è–≤–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤ –ø—Ä–∏–Ω—è—Ç—ã–µ.', ephemeral: true });
      setTimeout(() => appChannel.delete().catch(() => {}), 1000);
    }

    if (action === 'review_app') {
      await appChannel.send(`üì• –ó–∞—è–≤–∫–∞ <@${targetUserId}> –≤–∑—è—Ç–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º <@${interaction.user.id}>`);
      await member.send({
        embeds: [new EmbedBuilder()
          .setTitle('üîé –†–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏')
          .setDescription(`–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –≤ —Å–µ–º—å—é –≤–∑—è—Ç–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ!\n–°—Å—ã–ª–∫–∞: ${appChannel}`)
          .setColor('Orange')]
      }).catch(() => {});
      return interaction.reply({ content: 'üì• –ó–∞—è–≤–∫–∞ –≤–∑—è—Ç–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ.', ephemeral: true });
    }

    if (action === 'call_app') {
      const voiceChannels = guild.channels.cache.filter(c => c.type === ChannelType.GuildVoice);
      const options = voiceChannels.map(vc => ({ label: vc.name, value: vc.id })).slice(0, 25);
      const selectMenu = new StringSelectMenuBuilder()
        .setCustomId(`call_select:${targetUserId}`)
        .setPlaceholder('–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª –¥–ª—è –æ–±–∑–≤–æ–Ω–∞')
        .addOptions(options);

      return interaction.reply({
        content: 'üîä –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª –¥–ª—è –æ–±–∑–≤–æ–Ω–∞:',
        components: [new ActionRowBuilder().addComponents(selectMenu)],
        ephemeral: true
      });
    }

    if (action === 'decline_app') {
      const targetChannel = await guild.channels.fetch(CHANNEL_DECLINE_ID).catch(() => null);
      if (targetChannel?.isTextBased() && embedToSend) {
        await targetChannel.send({
          content: `‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç <@${targetUserId}> –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.`,
          embeds: [embedToSend]
        });
      }

      await logChannel?.send({
        embeds: [new EmbedBuilder()
          .setTitle('‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞')
          .setDescription(`–ó–∞—è–≤–∫–∞ –æ—Ç <@${targetUserId}> –±—ã–ª–∞ **–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞** –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º <@${interaction.user.id}>.`)
          .setColor('Red')
          .setTimestamp()]
      });

      await member.send({
        embeds: [new EmbedBuilder()
          .setTitle('‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞')
          .setDescription('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –ù–µ –æ—Ç—á–∞–∏–≤–∞–π—Ç–µ—Å—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!')
          .setColor('Red')]
      }).catch(() => {});

      await interaction.reply({ content: '‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.', ephemeral: true });
      setTimeout(() => appChannel.delete().catch(() => {}), 1000);
    }
  }

  if (interaction.isStringSelectMenu()) {
    const [action, targetUserId] = interaction.customId.split(':');
    if (action !== 'call_select') return;

    const selectedChannel = interaction.guild.channels.cache.get(interaction.values[0]);
    const member = await interaction.guild.members.fetch(targetUserId).catch(() => null);
    if (!selectedChannel || !member) return;

    await interaction.channel.send(`üìû <@${targetUserId}> –≤—ã–∑–≤–∞–Ω –Ω–∞ **–æ–±–∑–≤–æ–Ω** –≤ –∫–∞–Ω–∞–ª ${selectedChannel} –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º <@${interaction.user.id}>`);
    await member.send({
      embeds: [new EmbedBuilder()
        .setTitle('üìû –í—ã–∑–æ–≤ –Ω–∞ –æ–±–∑–≤–æ–Ω')
        .setDescription(`–í—ã –≤—ã–∑–≤–∞–Ω—ã –Ω–∞ **–æ–±–∑–≤–æ–Ω** –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º <@${interaction.user.id}> –≤ –∫–∞–Ω–∞–ª **${selectedChannel.name}**.`)
        .setColor('Blurple')]
    }).catch(() => {});
    await interaction.update({ content: 'üìû –û–±–∑–≤–æ–Ω –Ω–∞–∑–Ω–∞—á–µ–Ω.', components: [] });
  }
});

console.log('üîê –¢–æ–∫–µ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω');
client.login(process.env.TOKEN);
