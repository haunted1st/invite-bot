// == –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è ==
require('dotenv').config();
const express = require('express');
const app = express();
app.get('/', (req, res) => res.send('‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç'));
app.listen(3000, () => console.log('üåê Express —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 3000'));

// == –ò–º–ø–æ—Ä—Ç—ã ==
const {
  Client, GatewayIntentBits, Partials,
  EmbedBuilder, ModalBuilder, TextInputBuilder, TextInputStyle,
  ActionRowBuilder, ButtonBuilder, ButtonStyle,
  ChannelType, PermissionsBitField, InteractionType,
  StringSelectMenuBuilder
} = require('discord.js');

const dayjs = require('dayjs');
const relativeTime = require('dayjs/plugin/relativeTime');
dayjs.extend(relativeTime);

const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent,
    GatewayIntentBits.GuildVoiceStates,
    GatewayIntentBits.GuildMembers
  ],
  partials: [Partials.Channel]
});

// == –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ==
const CATEGORY_ID = '1200037290538451095';
const CHANNEL_ACCEPT_ID = '1386830144789942272';
const CHANNEL_DECLINE_ID = '1386830559136714825';
const CHANNEL_LOG_ID = '1304923881294925876';
const INVITE_CHANNEL_ID = '1387148896320487564';
const ALLOWED_ROLES = ['1203016198850355231', '1203021666800902184', '1200040982746517595', '1200045928460058768' ]; // PR –∏ High PR
const voiceChannelIdsForCall = ['1203029383871463444', '1386828355499851806', '1327303833491345419'];

function hasAllowedRole(member) {
  return member.roles.cache.some(role => ALLOWED_ROLES.includes(role.id));
}

function createStatusNotificationEmbed(status, applicationName, channelName = '', guildId, applicationLink = '') {
  let color, title = '', description = '';
  const timeAgo = dayjs().fromNow();

  switch (status.toLowerCase()) {
    case '—Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ':
      color = 0xf1c40f;
      title = '–†–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏';
      description = `–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –≤ **${applicationName}** –≤–∑—è—Ç–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ!`;
      break;
    case '–æ–±–∑–≤–æ–Ω':
      color = 0x3498db;
      title = '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ –æ–±–∑–≤–æ–Ω';
      description = `–í—ã –±—ã–ª–∏ –≤—ã–∑–≤–∞–Ω—ã –Ω–∞ –æ–±–∑–≤–æ–Ω!`;
      break;
    case '–ø—Ä–∏–Ω—è—Ç–æ':
      color = 0x2ecc71;
      title = '–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞';
      description = `–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –≤ **${applicationName}** —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç–∞!`;
      break;
    case '–æ—Ç–∫–ª–æ–Ω–µ–Ω–æ':
      color = 0xe74c3c;
      title = '–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞';
      description = `–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –≤ **${applicationName}** –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.`;
      break;
    default:
      color = 0x2f3136;
      title = '–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –æ–±–Ω–æ–≤–ª—ë–Ω';
      description = `–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ **${applicationName}** –∏–∑–º–µ–Ω—ë–Ω.`;
  }

  return new EmbedBuilder()
    .setColor(color)
    .setTitle(title)
    .setDescription(description)
    .setTimestamp();
}

client.once('ready', async () => {
  console.log(`‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ ${client.user.tag}`);

  const inviteChannel = await client.channels.fetch(INVITE_CHANNEL_ID);
  if (!inviteChannel || !inviteChannel.isTextBased()) return;

  const messages = await inviteChannel.messages.fetch({ limit: 10 });
  const botMessage = messages.find((m) => m.author.id === client.user.id);
  if (botMessage) await botMessage.delete().catch(() => {});

  const embed = new EmbedBuilder()
    .setTitle('üìã –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É')
    .setDescription(
      '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É.\n\n' +
      '**–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?**\n' +
      '1. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É **–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É**.\n' +
      '2. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è —Ñ–æ—Ä–º—ã.\n' +
      '3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ä–º—É, –∏ –º—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –≤–∞—à—É –∑–∞—è–≤–∫—É –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.'
    )
    .setImage('https://media.discordapp.net/attachments/1300952767078203493/1388174214187581582/ezgif-61741d6e62f365.gif')
    .setColor(0x2f3136);

  const button = new ButtonBuilder()
    .setCustomId('open_modal')
    .setLabel('–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É')
    .setStyle(ButtonStyle.Primary);

  const row = new ActionRowBuilder().addComponents(button);
  await inviteChannel.send({ embeds: [embed], components: [row] });
});

client.on('interactionCreate', async interaction => {
  if (interaction.isButton() && interaction.customId === 'open_modal') {
    const modal = new ModalBuilder().setCustomId('application_modal').setTitle('üìù –ó–∞—è–≤–∫–∞ –≤ —Å–µ–º—å—é');
    const fields = [
      { id: 'nickname_stat', label: '–ù–∏–∫–Ω–µ–π–º | —Å—Ç–∞—Ç–∏–∫', style: TextInputStyle.Short, placeholder: 'Sky Garcia | 100000' },
      { id: 'irl_name_age', label: 'IRL –ò–º—è | –≤–æ–∑—Ä–∞—Å—Ç', style: TextInputStyle.Short, placeholder: '–¢–∏–º–∞ | 20' },
      { id: 'family_history', label: '–í –∫–∞–∫–∏—Ö —Å–µ–º—å—è—Ö —Å–æ—Å—Ç–æ—è–ª–∏ —Ä–∞–Ω–µ–µ', style: TextInputStyle.Paragraph, placeholder: '–£–∫–∞–∂–∏—Ç–µ, –µ—Å–ª–∏ –±—ã–ª–∏ –≤ –¥—Ä—É–≥–∏—Ö —Å–µ–º—å—è—Ö' },
      { id: 'servers', label: '–ù–∞ –∫–∞–∫–∏—Ö —Å–µ—Ä–≤–µ—Ä–∞—Ö –≤–∫–∞—á–∞–Ω—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∏?', style: TextInputStyle.Short, placeholder: '06, 11, 15' },
      { id: 'recoil_links', label: '–û—Ç–∫–∞—Ç—ã —Å—Ç—Ä–µ–ª—å–±—ã (YouTube / Rutube)', style: TextInputStyle.Paragraph, placeholder: 'https://youtube.com..' }
    ];
    modal.addComponents(...fields.map(f => new ActionRowBuilder().addComponents(
      new TextInputBuilder().setCustomId(f.id).setLabel(f.label).setStyle(f.style).setPlaceholder(f.placeholder).setRequired(true)
    )));
    return interaction.showModal(modal);
  }

  if (interaction.type === InteractionType.ModalSubmit && interaction.customId === 'application_modal') {
    await interaction.deferReply({ ephemeral: true });
    const user = interaction.user;
    const guild = interaction.guild;
    const values = {
      nickname: interaction.fields.getTextInputValue('nickname_stat'),
      irl: interaction.fields.getTextInputValue('irl_name_age'),
      history: interaction.fields.getTextInputValue('family_history'),
      servers: interaction.fields.getTextInputValue('servers'),
      recoil: interaction.fields.getTextInputValue('recoil_links')
    };
    const overwrites = [
      { id: guild.roles.everyone, deny: [PermissionsBitField.Flags.ViewChannel] },
      { id: user.id, allow: [PermissionsBitField.Flags.ViewChannel] },
      ...ALLOWED_ROLES.map(id => ({ id, allow: [PermissionsBitField.Flags.ViewChannel] }))
    ];
    const channel = await guild.channels.create({
      name: `–∑–∞—è–≤–∫–∞-${user.username}`.toLowerCase().replace(/[^a-z0-9–∞-—è—ë\-]/gi, '-'),
      type: ChannelType.GuildText,
      parent: CATEGORY_ID,
      permissionOverwrites: overwrites
    });

    const embed = new EmbedBuilder()
      .setTitle('üì® –ó–∞—è–≤–∫–∞')
      .addFields(
        { name: '–ù–∏–∫–Ω–µ–π–º –∏ —Å—Ç–∞—Ç–∏–∫', value: values.nickname },
        { name: 'IRL –∏–º—è –∏ –≤–æ–∑—Ä–∞—Å—Ç', value: values.irl },
        { name: '–°–µ–º—å–∏ —Ä–∞–Ω–µ–µ', value: values.history },
        { name: '–°–µ—Ä–≤–µ—Ä–∞', value: values.servers },
        { name: '–û—Ç–∫–∞—Ç—ã —Å—Ç—Ä–µ–ª—å–±—ã', value: values.recoil },
        { name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', value: `<@${user.id}>` }
      )
      .setFooter({ text: `ID: ${user.id}` })
      .setColor(0x2f3136)
      .setTimestamp();

    const buttons = new ActionRowBuilder().addComponents(
      new ButtonBuilder().setCustomId(`accept_app:${user.id}`).setLabel('–ü—Ä–∏–Ω—è—Ç—å').setStyle(ButtonStyle.Success),
      new ButtonBuilder().setCustomId(`review_app:${user.id}`).setLabel('–†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å').setStyle(ButtonStyle.Secondary),
      new ButtonBuilder().setCustomId(`call_app:${user.id}`).setLabel('–û–±–∑–≤–æ–Ω').setStyle(ButtonStyle.Primary),
      new ButtonBuilder().setCustomId(`decline_app:${user.id}`).setLabel('–û—Ç–∫–ª–æ–Ω–∏—Ç—å').setStyle(ButtonStyle.Danger)
    );

    const rolesToMention = ['1203016198850355200', '1203021666800902100'];

    await channel.send({
      content: rolesToMention.map(id => `<@&${id}>`).join(' '),
      embeds: [embed],
      components: [buttons]
    });

    await interaction.editReply({ content: `‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: ${channel}` });
  }
});

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
  client.on('interactionCreate', async interaction => {
  if (interaction.isButton()) {
    const [action, userId] = interaction.customId.split(':');
    if (!['accept_app', 'decline_app', 'review_app', 'call_app'].includes(action)) return;

    const guild = interaction.guild;
    const logChannel = guild.channels.cache.get(CHANNEL_LOG_ID);
    const acceptChannel = guild.channels.cache.get(CHANNEL_ACCEPT_ID);
    const declineChannel = guild.channels.cache.get(CHANNEL_DECLINE_ID);
    const targetUser = await client.users.fetch(userId).catch(() => null);
    if (!targetUser) return interaction.reply({ content: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.', ephemeral: true });

    const appChannel = interaction.channel;
    const member = await guild.members.fetch(interaction.user.id).catch(() => null);

    if (!member || !hasAllowedRole(member)) {
      return interaction.reply({ content: '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.', ephemeral: true });
    }

    if (action === 'accept_app') {
      await interaction.update({ content: `–ó–∞—è–≤–∫–∞ **–ø—Ä–∏–Ω—è—Ç–∞** ${interaction.user}`, components: [] });
      await targetUser.send(`–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ **–ø—Ä–∏–Ω—è—Ç–∞**!`).catch(() => {});
      logChannel?.send(`‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç ${targetUser.tag} –ø—Ä–∏–Ω—è—Ç–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º ${interaction.user.tag}`);
      acceptChannel?.send(`‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç ${targetUser} –ø—Ä–∏–Ω—è—Ç–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º ${interaction.user}`);
      await appChannel.send(`‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç ${targetUser} –ø—Ä–∏–Ω—è—Ç–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º ${interaction.user}`);
      return;
    }

    if (action === 'decline_app') {
      const modal = new ModalBuilder()
        .setCustomId(`decline_reason:${userId}`)
        .setTitle('–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏');
      const reasonInput = new TextInputBuilder()
        .setCustomId('reason')
        .setLabel('–ü—Ä–∏—á–∏–Ω–∞')
        .setStyle(TextInputStyle.Paragraph)
        .setPlaceholder('–û–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è')
        .setRequired(true);
      modal.addComponents(new ActionRowBuilder().addComponents(reasonInput));
      await interaction.showModal(modal);
      return;
    }

    if (action === 'review_app') {
      await interaction.update({ content: `–ó–∞—è–≤–∫–∞ **–Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏**. –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: ${interaction.user}`, components: [] });
      await targetUser.send(`–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –≤–∑—è—Ç–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º ${interaction.user.tag}`).catch(() => {});
      logChannel?.send(`‚ö†Ô∏è –ó–∞—è–≤–∫–∞ –æ—Ç ${targetUser.tag} –≤–∑—è—Ç–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ ${interaction.user.tag}`);
      await appChannel.send(`‚ö†Ô∏è –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä ${interaction.user} –≤–∑—è–ª –∑–∞—è–≤–∫—É –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ.`);
      return;
    }

    if (action === 'call_app') {
      const voiceChannels = voiceChannelIdsForCall
        .map(id => guild.channels.cache.get(id))
        .filter(ch => ch && ch.type === ChannelType.GuildVoice);
      if (voiceChannels.length === 0) {
        return interaction.reply({ content: '–ì–æ–ª–æ—Å–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è –æ–±–∑–≤–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.', ephemeral: true });
      }
      const options = voiceChannels.map(ch => ({ label: ch.name, value: ch.id }));
      const selectMenu = new StringSelectMenuBuilder()
        .setCustomId(`select_call_channel:${userId}`)
        .setPlaceholder('–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª –¥–ª—è –æ–±–∑–≤–æ–Ω–∞')
        .addOptions(options);
      const row = new ActionRowBuilder().addComponents(selectMenu);
      await interaction.reply({ content: '–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª –¥–ª—è –æ–±–∑–≤–æ–Ω–∞:', components: [row], ephemeral: true });
      return;
    }
  }

  if (interaction.isStringSelectMenu() && interaction.customId.startsWith('select_call_channel:')) {
    try {
      const userId = interaction.customId.split(':')[1];
      const guild = interaction.guild;
      const targetUser = await client.users.fetch(userId).catch(() => null);
      if (!targetUser) return interaction.reply({ content: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.', ephemeral: true });

      const selectedChannelId = interaction.values[0];
      const selectedChannel = guild.channels.cache.get(selectedChannelId);
      if (!selectedChannel || selectedChannel.type !== ChannelType.GuildVoice) {
        return interaction.reply({ content: '–í—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.', ephemeral: true });
      }

      const voiceLink = `https://discord.com/channels/${guild.id}/${selectedChannel.id}`;
      const now = `<t:${Math.floor(Date.now() / 1000)}:f>`;
      const logChannel = guild.channels.cache.get(CHANNEL_LOG_ID);

      logChannel?.send(
  `üìû –ó–∞—è–≤–∫–∞ –æ—Ç <@${targetUser.id}> –≤—ã–∑–≤–∞–Ω–∞ –Ω–∞ –æ–±–∑–≤–æ–Ω.\n` +
  `üîä –ö–∞–Ω–∞–ª: **${selectedChannel.name}**\n` +
  `üë§ –í—ã–∑–≤–∞–ª: ${interaction.user}\n` +
  `üîó ${voiceLink}`
);

      await interaction.update({
      content: `üìû –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä ${interaction.user} –≤—ã–∑–≤–∞–ª ${targetUser} –Ω–∞ –æ–±–∑–≤–æ–Ω –≤ **${selectedChannel.name}**\nüîó –°—Å—ã–ª–∫–∞: ${selectedChannel}`,
      components: []
    });

      const dmEmbed = new EmbedBuilder()
        .setTitle('üìû –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ –æ–±–∑–≤–æ–Ω')
        .setDescription(
          `–í—ã –±—ã–ª–∏ –≤—ã–∑–≤–∞–Ω—ã –Ω–∞ –æ–±–∑–≤–æ–Ω!\n\n` +
          `–í–∞—Å –ø—Ä–∏–≥–ª–∞—à–∞—é—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É:\n[${selectedChannel.name}](${voiceLink})\n\n` +
          `**ID –î–∏—Å–∫–æ—Ä–¥ —Å–µ—Ä–≤–µ—Ä–∞:** \`${guild.id}\`\n` +
          `**–î–∞—Ç–∞ —Å–æ–±—ã—Ç–∏—è:** ${now}`
        )
        .setColor(0x3498db)
        .setTimestamp();

      await targetUser.send({ embeds: [dmEmbed] }).catch(() => {});

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ select_call_channel:', error);
      if (!interaction.replied) {
        await interaction.reply({ content: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞.', ephemeral: true });
      }
    }
  }
}); // <-- –∑–∞–∫—Ä—ã–≤–∞–µ–º client.on('interactionCreate')

client.login(process.env.TOKEN);
